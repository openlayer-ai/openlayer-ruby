# typed: strong

module Openlayer
  module Models
    module InferencePipelines
      class RowUpdateParams < Openlayer::Internal::Type::BaseModel
        extend Openlayer::Internal::Type::RequestParameters::Converter
        include Openlayer::Internal::Type::RequestParameters

        OrHash =
          T.type_alias do
            T.any(
              Openlayer::InferencePipelines::RowUpdateParams,
              Openlayer::Internal::AnyHash
            )
          end

        # Specify the inference id as a query param.
        sig { returns(String) }
        attr_accessor :inference_id

        sig { returns(T.anything) }
        attr_accessor :row

        sig do
          returns(
            T.nilable(Openlayer::InferencePipelines::RowUpdateParams::Config)
          )
        end
        attr_reader :config

        sig do
          params(
            config:
              T.nilable(
                Openlayer::InferencePipelines::RowUpdateParams::Config::OrHash
              )
          ).void
        end
        attr_writer :config

        sig do
          params(
            inference_id: String,
            row: T.anything,
            config:
              T.nilable(
                Openlayer::InferencePipelines::RowUpdateParams::Config::OrHash
              ),
            request_options: Openlayer::RequestOptions::OrHash
          ).returns(T.attached_class)
        end
        def self.new(
          # Specify the inference id as a query param.
          inference_id:,
          row:,
          config: nil,
          request_options: {}
        )
        end

        sig do
          override.returns(
            {
              inference_id: String,
              row: T.anything,
              config:
                T.nilable(
                  Openlayer::InferencePipelines::RowUpdateParams::Config
                ),
              request_options: Openlayer::RequestOptions
            }
          )
        end
        def to_hash
        end

        class Config < Openlayer::Internal::Type::BaseModel
          OrHash =
            T.type_alias do
              T.any(
                Openlayer::InferencePipelines::RowUpdateParams::Config,
                Openlayer::Internal::AnyHash
              )
            end

          # Name of the column with the ground truths.
          sig { returns(T.nilable(String)) }
          attr_accessor :ground_truth_column_name

          # Name of the column with human feedback.
          sig { returns(T.nilable(String)) }
          attr_accessor :human_feedback_column_name

          # Name of the column with the latencies.
          sig { returns(T.nilable(String)) }
          attr_accessor :latency_column_name

          # Name of the column with the timestamps. Timestamps must be in UNIX sec format.
          # If not provided, the upload timestamp is used.
          sig { returns(T.nilable(String)) }
          attr_accessor :timestamp_column_name

          # Name of the column with the inference ids. This is useful if you want to update
          # rows at a later point in time. If not provided, a unique id is generated by
          # Openlayer.
          sig { returns(T.nilable(String)) }
          attr_accessor :inference_id_column_name

          sig do
            params(
              ground_truth_column_name: T.nilable(String),
              human_feedback_column_name: T.nilable(String),
              inference_id_column_name: T.nilable(String),
              latency_column_name: T.nilable(String),
              timestamp_column_name: T.nilable(String)
            ).returns(T.attached_class)
          end
          def self.new(
            # Name of the column with the ground truths.
            ground_truth_column_name: nil,
            # Name of the column with human feedback.
            human_feedback_column_name: nil,
            # Name of the column with the inference ids. This is useful if you want to update
            # rows at a later point in time. If not provided, a unique id is generated by
            # Openlayer.
            inference_id_column_name: nil,
            # Name of the column with the latencies.
            latency_column_name: nil,
            # Name of the column with the timestamps. Timestamps must be in UNIX sec format.
            # If not provided, the upload timestamp is used.
            timestamp_column_name: nil
          )
          end

          sig do
            override.returns(
              {
                ground_truth_column_name: T.nilable(String),
                human_feedback_column_name: T.nilable(String),
                inference_id_column_name: T.nilable(String),
                latency_column_name: T.nilable(String),
                timestamp_column_name: T.nilable(String)
              }
            )
          end
          def to_hash
          end
        end
      end
    end
  end
end
