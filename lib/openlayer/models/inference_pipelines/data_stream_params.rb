# frozen_string_literal: true

module Openlayer
  module Models
    module InferencePipelines
      # @see Openlayer::Resources::InferencePipelines::Data#stream
      class DataStreamParams < Openlayer::Internal::Type::BaseModel
        extend Openlayer::Internal::Type::RequestParameters::Converter
        include Openlayer::Internal::Type::RequestParameters

        # @!attribute config
        #   Configuration for the data stream. Depends on your **Openlayer project task
        #   type**.
        #
        #   @return [Openlayer::Models::InferencePipelines::DataStreamParams::Config::LlmData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularClassificationData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularRegressionData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TextClassificationData]
        required :config, union: -> { Openlayer::InferencePipelines::DataStreamParams::Config }

        # @!attribute rows
        #   A list of inference data points with inputs and outputs
        #
        #   @return [Array<Hash{Symbol=>Object}>]
        required :rows,
                 Openlayer::Internal::Type::ArrayOf[Openlayer::Internal::Type::HashOf[Openlayer::Internal::Type::Unknown]]

        # @!method initialize(config:, rows:, request_options: {})
        #   Some parameter documentations has been truncated, see
        #   {Openlayer::Models::InferencePipelines::DataStreamParams} for more details.
        #
        #   @param config [Openlayer::Models::InferencePipelines::DataStreamParams::Config::LlmData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularClassificationData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularRegressionData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TextClassificationData] Configuration for the data stream. Depends on your \*\*Openlayer project task
        #   type
        #
        #   @param rows [Array<Hash{Symbol=>Object}>] A list of inference data points with inputs and outputs
        #
        #   @param request_options [Openlayer::RequestOptions, Hash{Symbol=>Object}]

        # Configuration for the data stream. Depends on your **Openlayer project task
        # type**.
        module Config
          extend Openlayer::Internal::Type::Union

          variant -> { Openlayer::InferencePipelines::DataStreamParams::Config::LlmData }

          variant -> { Openlayer::InferencePipelines::DataStreamParams::Config::TabularClassificationData }

          variant -> { Openlayer::InferencePipelines::DataStreamParams::Config::TabularRegressionData }

          variant -> { Openlayer::InferencePipelines::DataStreamParams::Config::TextClassificationData }

          class LlmData < Openlayer::Internal::Type::BaseModel
            # @!attribute output_column_name
            #   Name of the column with the model outputs.
            #
            #   @return [String]
            required :output_column_name, String, api_name: :outputColumnName

            # @!attribute context_column_name
            #   Name of the column with the context retrieved. Applies to RAG use cases.
            #   Providing the context enables RAG-specific metrics.
            #
            #   @return [String, nil]
            optional :context_column_name, String, api_name: :contextColumnName

            # @!attribute cost_column_name
            #   Name of the column with the cost associated with each row.
            #
            #   @return [String, nil]
            optional :cost_column_name, String, api_name: :costColumnName

            # @!attribute ground_truth_column_name
            #   Name of the column with the ground truths.
            #
            #   @return [String, nil]
            optional :ground_truth_column_name, String, api_name: :groundTruthColumnName

            # @!attribute inference_id_column_name
            #   Name of the column with the inference ids. This is useful if you want to update
            #   rows at a later point in time. If not provided, a unique id is generated by
            #   Openlayer.
            #
            #   @return [String, nil]
            optional :inference_id_column_name, String, api_name: :inferenceIdColumnName

            # @!attribute input_variable_names
            #   Array of input variable names. Each input variable should be a dataset column.
            #
            #   @return [Array<String>, nil]
            optional :input_variable_names,
                     Openlayer::Internal::Type::ArrayOf[String],
                     api_name: :inputVariableNames

            # @!attribute latency_column_name
            #   Name of the column with the latencies.
            #
            #   @return [String, nil]
            optional :latency_column_name, String, api_name: :latencyColumnName

            # @!attribute metadata
            #   Object with metadata.
            #
            #   @return [Object, nil]
            optional :metadata, Openlayer::Internal::Type::Unknown

            # @!attribute num_of_token_column_name
            #   Name of the column with the total number of tokens.
            #
            #   @return [String, nil]
            optional :num_of_token_column_name, String, api_name: :numOfTokenColumnName, nil?: true

            # @!attribute prompt
            #   Prompt for the LLM.
            #
            #   @return [Array<Openlayer::Models::InferencePipelines::DataStreamParams::Config::LlmData::Prompt>, nil]
            optional :prompt,
                     -> { Openlayer::Internal::Type::ArrayOf[Openlayer::InferencePipelines::DataStreamParams::Config::LlmData::Prompt] }

            # @!attribute question_column_name
            #   Name of the column with the questions. Applies to RAG use cases. Providing the
            #   question enables RAG-specific metrics.
            #
            #   @return [String, nil]
            optional :question_column_name, String, api_name: :questionColumnName

            # @!attribute session_id_column_name
            #   Name of the column with the session id.
            #
            #   @return [String, nil]
            optional :session_id_column_name, String, api_name: :sessionIdColumnName, nil?: true

            # @!attribute timestamp_column_name
            #   Name of the column with the timestamps. Timestamps must be in UNIX sec format.
            #   If not provided, the upload timestamp is used.
            #
            #   @return [String, nil]
            optional :timestamp_column_name, String, api_name: :timestampColumnName

            # @!attribute user_id_column_name
            #   Name of the column with the user id.
            #
            #   @return [String, nil]
            optional :user_id_column_name, String, api_name: :userIdColumnName, nil?: true

            # @!method initialize(output_column_name:, context_column_name: nil, cost_column_name: nil, ground_truth_column_name: nil, inference_id_column_name: nil, input_variable_names: nil, latency_column_name: nil, metadata: nil, num_of_token_column_name: nil, prompt: nil, question_column_name: nil, session_id_column_name: nil, timestamp_column_name: nil, user_id_column_name: nil)
            #   Some parameter documentations has been truncated, see
            #   {Openlayer::Models::InferencePipelines::DataStreamParams::Config::LlmData} for
            #   more details.
            #
            #   @param output_column_name [String] Name of the column with the model outputs.
            #
            #   @param context_column_name [String] Name of the column with the context retrieved. Applies to RAG use cases. Providi
            #
            #   @param cost_column_name [String] Name of the column with the cost associated with each row.
            #
            #   @param ground_truth_column_name [String] Name of the column with the ground truths.
            #
            #   @param inference_id_column_name [String] Name of the column with the inference ids. This is useful if you want to update
            #
            #   @param input_variable_names [Array<String>] Array of input variable names. Each input variable should be a dataset column.
            #
            #   @param latency_column_name [String] Name of the column with the latencies.
            #
            #   @param metadata [Object] Object with metadata.
            #
            #   @param num_of_token_column_name [String, nil] Name of the column with the total number of tokens.
            #
            #   @param prompt [Array<Openlayer::Models::InferencePipelines::DataStreamParams::Config::LlmData::Prompt>] Prompt for the LLM.
            #
            #   @param question_column_name [String] Name of the column with the questions. Applies to RAG use cases. Providing the q
            #
            #   @param session_id_column_name [String, nil] Name of the column with the session id.
            #
            #   @param timestamp_column_name [String] Name of the column with the timestamps. Timestamps must be in UNIX sec format. I
            #
            #   @param user_id_column_name [String, nil] Name of the column with the user id.

            class Prompt < Openlayer::Internal::Type::BaseModel
              # @!attribute content
              #   Content of the prompt.
              #
              #   @return [String, nil]
              optional :content, String

              # @!attribute role
              #   Role of the prompt.
              #
              #   @return [String, nil]
              optional :role, String

              # @!method initialize(content: nil, role: nil)
              #   @param content [String] Content of the prompt.
              #
              #   @param role [String] Role of the prompt.
            end
          end

          class TabularClassificationData < Openlayer::Internal::Type::BaseModel
            # @!attribute class_names
            #   List of class names indexed by label integer in the dataset. E.g. ["Retained",
            #   "Exited"] when 0, 1 are in your label column.
            #
            #   @return [Array<String>]
            required :class_names, Openlayer::Internal::Type::ArrayOf[String], api_name: :classNames

            # @!attribute categorical_feature_names
            #   Array with the names of all categorical features in the dataset. E.g. ["Age",
            #   "Geography"].
            #
            #   @return [Array<String>, nil]
            optional :categorical_feature_names,
                     Openlayer::Internal::Type::ArrayOf[String],
                     api_name: :categoricalFeatureNames

            # @!attribute feature_names
            #   Array with all input feature names.
            #
            #   @return [Array<String>, nil]
            optional :feature_names, Openlayer::Internal::Type::ArrayOf[String], api_name: :featureNames

            # @!attribute inference_id_column_name
            #   Name of the column with the inference ids. This is useful if you want to update
            #   rows at a later point in time. If not provided, a unique id is generated by
            #   Openlayer.
            #
            #   @return [String, nil]
            optional :inference_id_column_name, String, api_name: :inferenceIdColumnName

            # @!attribute label_column_name
            #   Name of the column with the labels. The data in this column must be
            #   **zero-indexed integers**, matching the list provided in `classNames`.
            #
            #   @return [String, nil]
            optional :label_column_name, String, api_name: :labelColumnName

            # @!attribute latency_column_name
            #   Name of the column with the latencies.
            #
            #   @return [String, nil]
            optional :latency_column_name, String, api_name: :latencyColumnName

            # @!attribute metadata
            #   Object with metadata.
            #
            #   @return [Object, nil]
            optional :metadata, Openlayer::Internal::Type::Unknown

            # @!attribute predictions_column_name
            #   Name of the column with the model's predictions as **zero-indexed integers**.
            #
            #   @return [String, nil]
            optional :predictions_column_name, String, api_name: :predictionsColumnName

            # @!attribute prediction_scores_column_name
            #   Name of the column with the model's predictions as **lists of class
            #   probabilities**.
            #
            #   @return [String, nil]
            optional :prediction_scores_column_name, String, api_name: :predictionScoresColumnName

            # @!attribute timestamp_column_name
            #   Name of the column with the timestamps. Timestamps must be in UNIX sec format.
            #   If not provided, the upload timestamp is used.
            #
            #   @return [String, nil]
            optional :timestamp_column_name, String, api_name: :timestampColumnName

            # @!method initialize(class_names:, categorical_feature_names: nil, feature_names: nil, inference_id_column_name: nil, label_column_name: nil, latency_column_name: nil, metadata: nil, predictions_column_name: nil, prediction_scores_column_name: nil, timestamp_column_name: nil)
            #   Some parameter documentations has been truncated, see
            #   {Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularClassificationData}
            #   for more details.
            #
            #   @param class_names [Array<String>] List of class names indexed by label integer in the dataset. E.g. ["Retained", "
            #
            #   @param categorical_feature_names [Array<String>] Array with the names of all categorical features in the dataset. E.g. ["Age", "G
            #
            #   @param feature_names [Array<String>] Array with all input feature names.
            #
            #   @param inference_id_column_name [String] Name of the column with the inference ids. This is useful if you want to update
            #
            #   @param label_column_name [String] Name of the column with the labels. The data in this column must be
            #   \*\*zero-index
            #
            #   @param latency_column_name [String] Name of the column with the latencies.
            #
            #   @param metadata [Object] Object with metadata.
            #
            #   @param predictions_column_name [String] Name of the column with the model's predictions as **zero-indexed integers**.
            #
            #   @param prediction_scores_column_name [String] Name of the column with the model's predictions as \*\*lists of class
            #   probabilitie
            #
            #   @param timestamp_column_name [String] Name of the column with the timestamps. Timestamps must be in UNIX sec format. I
          end

          class TabularRegressionData < Openlayer::Internal::Type::BaseModel
            # @!attribute categorical_feature_names
            #   Array with the names of all categorical features in the dataset. E.g. ["Gender",
            #   "Geography"].
            #
            #   @return [Array<String>, nil]
            optional :categorical_feature_names,
                     Openlayer::Internal::Type::ArrayOf[String],
                     api_name: :categoricalFeatureNames

            # @!attribute feature_names
            #   Array with all input feature names.
            #
            #   @return [Array<String>, nil]
            optional :feature_names, Openlayer::Internal::Type::ArrayOf[String], api_name: :featureNames

            # @!attribute inference_id_column_name
            #   Name of the column with the inference ids. This is useful if you want to update
            #   rows at a later point in time. If not provided, a unique id is generated by
            #   Openlayer.
            #
            #   @return [String, nil]
            optional :inference_id_column_name, String, api_name: :inferenceIdColumnName

            # @!attribute latency_column_name
            #   Name of the column with the latencies.
            #
            #   @return [String, nil]
            optional :latency_column_name, String, api_name: :latencyColumnName

            # @!attribute metadata
            #   Object with metadata.
            #
            #   @return [Object, nil]
            optional :metadata, Openlayer::Internal::Type::Unknown

            # @!attribute predictions_column_name
            #   Name of the column with the model's predictions.
            #
            #   @return [String, nil]
            optional :predictions_column_name, String, api_name: :predictionsColumnName

            # @!attribute target_column_name
            #   Name of the column with the targets (ground truth values).
            #
            #   @return [String, nil]
            optional :target_column_name, String, api_name: :targetColumnName

            # @!attribute timestamp_column_name
            #   Name of the column with the timestamps. Timestamps must be in UNIX sec format.
            #   If not provided, the upload timestamp is used.
            #
            #   @return [String, nil]
            optional :timestamp_column_name, String, api_name: :timestampColumnName

            # @!method initialize(categorical_feature_names: nil, feature_names: nil, inference_id_column_name: nil, latency_column_name: nil, metadata: nil, predictions_column_name: nil, target_column_name: nil, timestamp_column_name: nil)
            #   Some parameter documentations has been truncated, see
            #   {Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularRegressionData}
            #   for more details.
            #
            #   @param categorical_feature_names [Array<String>] Array with the names of all categorical features in the dataset. E.g. ["Gender",
            #
            #   @param feature_names [Array<String>] Array with all input feature names.
            #
            #   @param inference_id_column_name [String] Name of the column with the inference ids. This is useful if you want to update
            #
            #   @param latency_column_name [String] Name of the column with the latencies.
            #
            #   @param metadata [Object] Object with metadata.
            #
            #   @param predictions_column_name [String] Name of the column with the model's predictions.
            #
            #   @param target_column_name [String] Name of the column with the targets (ground truth values).
            #
            #   @param timestamp_column_name [String] Name of the column with the timestamps. Timestamps must be in UNIX sec format. I
          end

          class TextClassificationData < Openlayer::Internal::Type::BaseModel
            # @!attribute class_names
            #   List of class names indexed by label integer in the dataset. E.g. ["Retained",
            #   "Exited"] when 0, 1 are in your label column.
            #
            #   @return [Array<String>]
            required :class_names, Openlayer::Internal::Type::ArrayOf[String], api_name: :classNames

            # @!attribute inference_id_column_name
            #   Name of the column with the inference ids. This is useful if you want to update
            #   rows at a later point in time. If not provided, a unique id is generated by
            #   Openlayer.
            #
            #   @return [String, nil]
            optional :inference_id_column_name, String, api_name: :inferenceIdColumnName

            # @!attribute label_column_name
            #   Name of the column with the labels. The data in this column must be
            #   **zero-indexed integers**, matching the list provided in `classNames`.
            #
            #   @return [String, nil]
            optional :label_column_name, String, api_name: :labelColumnName

            # @!attribute latency_column_name
            #   Name of the column with the latencies.
            #
            #   @return [String, nil]
            optional :latency_column_name, String, api_name: :latencyColumnName

            # @!attribute metadata
            #   Object with metadata.
            #
            #   @return [Object, nil]
            optional :metadata, Openlayer::Internal::Type::Unknown

            # @!attribute predictions_column_name
            #   Name of the column with the model's predictions as **zero-indexed integers**.
            #
            #   @return [String, nil]
            optional :predictions_column_name, String, api_name: :predictionsColumnName

            # @!attribute prediction_scores_column_name
            #   Name of the column with the model's predictions as **lists of class
            #   probabilities**.
            #
            #   @return [String, nil]
            optional :prediction_scores_column_name, String, api_name: :predictionScoresColumnName

            # @!attribute text_column_name
            #   Name of the column with the text data.
            #
            #   @return [String, nil]
            optional :text_column_name, String, api_name: :textColumnName

            # @!attribute timestamp_column_name
            #   Name of the column with the timestamps. Timestamps must be in UNIX sec format.
            #   If not provided, the upload timestamp is used.
            #
            #   @return [String, nil]
            optional :timestamp_column_name, String, api_name: :timestampColumnName

            # @!method initialize(class_names:, inference_id_column_name: nil, label_column_name: nil, latency_column_name: nil, metadata: nil, predictions_column_name: nil, prediction_scores_column_name: nil, text_column_name: nil, timestamp_column_name: nil)
            #   Some parameter documentations has been truncated, see
            #   {Openlayer::Models::InferencePipelines::DataStreamParams::Config::TextClassificationData}
            #   for more details.
            #
            #   @param class_names [Array<String>] List of class names indexed by label integer in the dataset. E.g. ["Retained", "
            #
            #   @param inference_id_column_name [String] Name of the column with the inference ids. This is useful if you want to update
            #
            #   @param label_column_name [String] Name of the column with the labels. The data in this column must be
            #   \*\*zero-index
            #
            #   @param latency_column_name [String] Name of the column with the latencies.
            #
            #   @param metadata [Object] Object with metadata.
            #
            #   @param predictions_column_name [String] Name of the column with the model's predictions as **zero-indexed integers**.
            #
            #   @param prediction_scores_column_name [String] Name of the column with the model's predictions as \*\*lists of class
            #   probabilitie
            #
            #   @param text_column_name [String] Name of the column with the text data.
            #
            #   @param timestamp_column_name [String] Name of the column with the timestamps. Timestamps must be in UNIX sec format. I
          end

          # @!method self.variants
          #   @return [Array(Openlayer::Models::InferencePipelines::DataStreamParams::Config::LlmData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularClassificationData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TabularRegressionData, Openlayer::Models::InferencePipelines::DataStreamParams::Config::TextClassificationData)]
        end
      end
    end
  end
end
