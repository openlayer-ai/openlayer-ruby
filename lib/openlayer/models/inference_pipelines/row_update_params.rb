# frozen_string_literal: true

module Openlayer
  module Models
    module InferencePipelines
      # @see Openlayer::Resources::InferencePipelines::Rows#update
      class RowUpdateParams < Openlayer::Internal::Type::BaseModel
        extend Openlayer::Internal::Type::RequestParameters::Converter
        include Openlayer::Internal::Type::RequestParameters

        # @!attribute inference_id
        #   Specify the inference id as a query param.
        #
        #   @return [String]
        required :inference_id, String

        # @!attribute row
        #
        #   @return [Object]
        required :row, Openlayer::Internal::Type::Unknown

        # @!attribute config
        #
        #   @return [Openlayer::Models::InferencePipelines::RowUpdateParams::Config, nil]
        optional :config, -> { Openlayer::InferencePipelines::RowUpdateParams::Config }, nil?: true

        # @!method initialize(inference_id:, row:, config: nil, request_options: {})
        #   @param inference_id [String] Specify the inference id as a query param.
        #
        #   @param row [Object]
        #
        #   @param config [Openlayer::Models::InferencePipelines::RowUpdateParams::Config, nil]
        #
        #   @param request_options [Openlayer::RequestOptions, Hash{Symbol=>Object}]

        class Config < Openlayer::Internal::Type::BaseModel
          # @!attribute ground_truth_column_name
          #   Name of the column with the ground truths.
          #
          #   @return [String, nil]
          optional :ground_truth_column_name, String, api_name: :groundTruthColumnName, nil?: true

          # @!attribute human_feedback_column_name
          #   Name of the column with human feedback.
          #
          #   @return [String, nil]
          optional :human_feedback_column_name, String, api_name: :humanFeedbackColumnName, nil?: true

          # @!attribute latency_column_name
          #   Name of the column with the latencies.
          #
          #   @return [String, nil]
          optional :latency_column_name, String, api_name: :latencyColumnName, nil?: true

          # @!attribute timestamp_column_name
          #   Name of the column with the timestamps. Timestamps must be in UNIX sec format.
          #   If not provided, the upload timestamp is used.
          #
          #   @return [String, nil]
          optional :timestamp_column_name, String, api_name: :timestampColumnName, nil?: true

          request_only do
            # @!attribute inference_id_column_name
            #   Name of the column with the inference ids. This is useful if you want to update
            #   rows at a later point in time. If not provided, a unique id is generated by
            #   Openlayer.
            #
            #   @return [String, nil]
            optional :inference_id_column_name, String, api_name: :inferenceIdColumnName, nil?: true
          end

          # @!method initialize(ground_truth_column_name: nil, human_feedback_column_name: nil, inference_id_column_name: nil, latency_column_name: nil, timestamp_column_name: nil)
          #   Some parameter documentations has been truncated, see
          #   {Openlayer::Models::InferencePipelines::RowUpdateParams::Config} for more
          #   details.
          #
          #   @param ground_truth_column_name [String, nil] Name of the column with the ground truths.
          #
          #   @param human_feedback_column_name [String, nil] Name of the column with human feedback.
          #
          #   @param inference_id_column_name [String, nil] Name of the column with the inference ids. This is useful if you want to update
          #
          #   @param latency_column_name [String, nil] Name of the column with the latencies.
          #
          #   @param timestamp_column_name [String, nil] Name of the column with the timestamps. Timestamps must be in UNIX sec format. I
        end
      end
    end
  end
end
