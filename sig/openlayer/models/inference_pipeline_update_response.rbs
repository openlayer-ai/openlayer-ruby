module Openlayer
  module Models
    type inference_pipeline_update_response =
      {
        id: String,
        date_created: Time,
        date_last_evaluated: Time?,
        date_last_sample_received: Time?,
        date_of_next_evaluation: Time?,
        date_updated: Time,
        description: String?,
        failing_goal_count: Integer,
        links: Openlayer::Models::InferencePipelineUpdateResponse::Links,
        name: String,
        passing_goal_count: Integer,
        project_id: String,
        status: Openlayer::Models::InferencePipelineUpdateResponse::status,
        status_message: String?,
        total_goal_count: Integer,
        data_backend: Openlayer::Models::InferencePipelineUpdateResponse::data_backend?,
        date_last_polled: Time?,
        project: Openlayer::Models::InferencePipelineUpdateResponse::Project?,
        total_records_count: Integer?,
        workspace: Openlayer::Models::InferencePipelineUpdateResponse::Workspace?,
        workspace_id: String
      }

    class InferencePipelineUpdateResponse < Openlayer::Internal::Type::BaseModel
      attr_accessor description: String?

      attr_accessor name: String

      attr_accessor data_backend: Openlayer::Models::InferencePipelineUpdateResponse::data_backend?

      attr_accessor project: Openlayer::Models::InferencePipelineUpdateResponse::Project?

      attr_accessor workspace: Openlayer::Models::InferencePipelineUpdateResponse::Workspace?

      attr_accessor id: String

      attr_accessor date_created: Time

      attr_accessor date_last_evaluated: Time?

      attr_accessor date_last_sample_received: Time?

      attr_accessor date_of_next_evaluation: Time?

      attr_accessor date_updated: Time

      attr_accessor failing_goal_count: Integer

      attr_accessor links: Openlayer::Models::InferencePipelineUpdateResponse::Links

      attr_accessor passing_goal_count: Integer

      attr_accessor project_id: String

      attr_accessor status: Openlayer::Models::InferencePipelineUpdateResponse::status

      attr_accessor status_message: String?

      attr_accessor total_goal_count: Integer

      attr_accessor date_last_polled: Time?

      attr_accessor total_records_count: Integer?

      attr_reader workspace_id: String?

      def workspace_id=: (String) -> String

      def initialize: (
        id: String,
        date_created: Time,
        date_last_evaluated: Time?,
        date_last_sample_received: Time?,
        date_of_next_evaluation: Time?,
        date_updated: Time,
        description: String?,
        failing_goal_count: Integer,
        links: Openlayer::Models::InferencePipelineUpdateResponse::Links,
        name: String,
        passing_goal_count: Integer,
        project_id: String,
        status: Openlayer::Models::InferencePipelineUpdateResponse::status,
        status_message: String?,
        total_goal_count: Integer,
        ?data_backend: Openlayer::Models::InferencePipelineUpdateResponse::data_backend?,
        ?date_last_polled: Time?,
        ?project: Openlayer::Models::InferencePipelineUpdateResponse::Project?,
        ?total_records_count: Integer?,
        ?workspace: Openlayer::Models::InferencePipelineUpdateResponse::Workspace?,
        ?workspace_id: String
      ) -> void

      def to_hash: -> {
        id: String,
        date_created: Time,
        date_last_evaluated: Time?,
        date_last_sample_received: Time?,
        date_of_next_evaluation: Time?,
        date_updated: Time,
        description: String?,
        failing_goal_count: Integer,
        links: Openlayer::Models::InferencePipelineUpdateResponse::Links,
        name: String,
        passing_goal_count: Integer,
        project_id: String,
        status: Openlayer::Models::InferencePipelineUpdateResponse::status,
        status_message: String?,
        total_goal_count: Integer,
        data_backend: Openlayer::Models::InferencePipelineUpdateResponse::data_backend?,
        date_last_polled: Time?,
        project: Openlayer::Models::InferencePipelineUpdateResponse::Project?,
        total_records_count: Integer?,
        workspace: Openlayer::Models::InferencePipelineUpdateResponse::Workspace?,
        workspace_id: String
      }

      type links = { app: String }

      class Links < Openlayer::Internal::Type::BaseModel
        attr_accessor app: String

        def initialize: (app: String) -> void

        def to_hash: -> { app: String }
      end

      type status =
        :queued | :running | :paused | :failed | :completed | :unknown

      module Status
        extend Openlayer::Internal::Type::Enum

        QUEUED: :queued
        RUNNING: :running
        PAUSED: :paused
        FAILED: :failed
        COMPLETED: :completed
        UNKNOWN: :unknown

        def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::status]
      end

      type data_backend =
        Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0
        | Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::BackendType
        | Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2
        | Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3
        | Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4
        | Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5

      module DataBackend
        extend Openlayer::Internal::Type::Union

        type union_member0 =
          {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::backend_type,
            bigquery_connection_id: String?,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::Config,
            dataset_id: String,
            project_id: String,
            table_id: String?,
            partition_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::partition_type?
          }

        class UnionMember0 < Openlayer::Internal::Type::BaseModel
          attr_accessor backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::backend_type

          attr_accessor bigquery_connection_id: String?

          attr_accessor dataset_id: String

          attr_accessor project_id: String

          attr_accessor table_id: String?

          attr_accessor partition_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::partition_type?

          def initialize: (
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::backend_type,
            bigquery_connection_id: String?,
            dataset_id: String,
            project_id: String,
            table_id: String?,
            ?partition_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::partition_type?
          ) -> void

          def to_hash: -> {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::backend_type,
            bigquery_connection_id: String?,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::Config,
            dataset_id: String,
            project_id: String,
            table_id: String?,
            partition_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::partition_type?
          }

          type backend_type = :bigquery

          module BackendType
            extend Openlayer::Internal::Type::Enum

            BIGQUERY: :bigquery

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::backend_type]
          end

          type config =
            {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }

          class Config < Openlayer::Internal::Type::BaseModel
            attr_accessor ground_truth_column_name: String?

            attr_accessor human_feedback_column_name: String?

            attr_accessor latency_column_name: String?

            attr_accessor timestamp_column_name: String?

            def initialize: (
              ?ground_truth_column_name: String?,
              ?human_feedback_column_name: String?,
              ?latency_column_name: String?,
              ?timestamp_column_name: String?
            ) -> void

            def to_hash: -> {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }
          end

          type partition_type = :DAY | :MONTH | :YEAR

          module PartitionType
            extend Openlayer::Internal::Type::Enum

            DAY: :DAY
            MONTH: :MONTH
            YEAR: :YEAR

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember0::partition_type]
          end
        end

        type backend_type =
          {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::BackendType::backend_type
          }

        class BackendType < Openlayer::Internal::Type::BaseModel
          attr_accessor backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::BackendType::backend_type

          def initialize: (
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::BackendType::backend_type
          ) -> void

          def to_hash: -> {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::BackendType::backend_type
          }

          type backend_type = :default

          module BackendType
            extend Openlayer::Internal::Type::Enum

            DEFAULT: :default

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::BackendType::backend_type]
          end
        end

        type union_member2 =
          {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::Config,
            database: String,
            schema: String,
            snowflake_connection_id: String?,
            table: String?
          }

        class UnionMember2 < Openlayer::Internal::Type::BaseModel
          attr_accessor backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::backend_type

          attr_accessor database: String

          attr_accessor schema: String

          attr_accessor snowflake_connection_id: String?

          attr_accessor table: String?

          def initialize: (
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::backend_type,
            database: String,
            schema: String,
            snowflake_connection_id: String?,
            table: String?
          ) -> void

          def to_hash: -> {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::Config,
            database: String,
            schema: String,
            snowflake_connection_id: String?,
            table: String?
          }

          type backend_type = :snowflake

          module BackendType
            extend Openlayer::Internal::Type::Enum

            SNOWFLAKE: :snowflake

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember2::backend_type]
          end

          type config =
            {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }

          class Config < Openlayer::Internal::Type::BaseModel
            attr_accessor ground_truth_column_name: String?

            attr_accessor human_feedback_column_name: String?

            attr_accessor latency_column_name: String?

            attr_accessor timestamp_column_name: String?

            def initialize: (
              ?ground_truth_column_name: String?,
              ?human_feedback_column_name: String?,
              ?latency_column_name: String?,
              ?timestamp_column_name: String?
            ) -> void

            def to_hash: -> {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }
          end
        end

        type union_member3 =
          {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::Config,
            databricks_dtl_connection_id: String?,
            table_id: String?
          }

        class UnionMember3 < Openlayer::Internal::Type::BaseModel
          attr_accessor backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::backend_type

          attr_accessor databricks_dtl_connection_id: String?

          attr_accessor table_id: String?

          def initialize: (
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::backend_type,
            databricks_dtl_connection_id: String?,
            table_id: String?
          ) -> void

          def to_hash: -> {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::Config,
            databricks_dtl_connection_id: String?,
            table_id: String?
          }

          type backend_type = :databricks_dtl

          module BackendType
            extend Openlayer::Internal::Type::Enum

            DATABRICKS_DTL: :databricks_dtl

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember3::backend_type]
          end

          type config =
            {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }

          class Config < Openlayer::Internal::Type::BaseModel
            attr_accessor ground_truth_column_name: String?

            attr_accessor human_feedback_column_name: String?

            attr_accessor latency_column_name: String?

            attr_accessor timestamp_column_name: String?

            def initialize: (
              ?ground_truth_column_name: String?,
              ?human_feedback_column_name: String?,
              ?latency_column_name: String?,
              ?timestamp_column_name: String?
            ) -> void

            def to_hash: -> {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }
          end
        end

        type union_member4 =
          {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::Config,
            redshift_connection_id: String?,
            schema_name: String,
            table_name: String
          }

        class UnionMember4 < Openlayer::Internal::Type::BaseModel
          attr_accessor backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::backend_type

          attr_accessor redshift_connection_id: String?

          attr_accessor schema_name: String

          attr_accessor table_name: String

          def initialize: (
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::backend_type,
            redshift_connection_id: String?,
            schema_name: String,
            table_name: String
          ) -> void

          def to_hash: -> {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::Config,
            redshift_connection_id: String?,
            schema_name: String,
            table_name: String
          }

          type backend_type = :redshift

          module BackendType
            extend Openlayer::Internal::Type::Enum

            REDSHIFT: :redshift

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember4::backend_type]
          end

          type config =
            {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }

          class Config < Openlayer::Internal::Type::BaseModel
            attr_accessor ground_truth_column_name: String?

            attr_accessor human_feedback_column_name: String?

            attr_accessor latency_column_name: String?

            attr_accessor timestamp_column_name: String?

            def initialize: (
              ?ground_truth_column_name: String?,
              ?human_feedback_column_name: String?,
              ?latency_column_name: String?,
              ?timestamp_column_name: String?
            ) -> void

            def to_hash: -> {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }
          end
        end

        type union_member5 =
          {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::Config,
            database: String,
            postgres_connection_id: String?,
            schema: String,
            table: String?
          }

        class UnionMember5 < Openlayer::Internal::Type::BaseModel
          attr_accessor backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::backend_type

          attr_accessor database: String

          attr_accessor postgres_connection_id: String?

          attr_accessor schema: String

          attr_accessor table: String?

          def initialize: (
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::backend_type,
            database: String,
            postgres_connection_id: String?,
            schema: String,
            table: String?
          ) -> void

          def to_hash: -> {
            backend_type: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::backend_type,
            config: Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::Config,
            database: String,
            postgres_connection_id: String?,
            schema: String,
            table: String?
          }

          type backend_type = :postgres

          module BackendType
            extend Openlayer::Internal::Type::Enum

            POSTGRES: :postgres

            def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::DataBackend::UnionMember5::backend_type]
          end

          type config =
            {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }

          class Config < Openlayer::Internal::Type::BaseModel
            attr_accessor ground_truth_column_name: String?

            attr_accessor human_feedback_column_name: String?

            attr_accessor latency_column_name: String?

            attr_accessor timestamp_column_name: String?

            def initialize: (
              ?ground_truth_column_name: String?,
              ?human_feedback_column_name: String?,
              ?latency_column_name: String?,
              ?timestamp_column_name: String?
            ) -> void

            def to_hash: -> {
              ground_truth_column_name: String?,
              human_feedback_column_name: String?,
              inference_id_column_name: String?,
              latency_column_name: String?,
              timestamp_column_name: String?
            }
          end
        end

        def self?.variants: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::data_backend]
      end

      type project =
        {
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          development_goal_count: Integer,
          goal_count: Integer,
          inference_pipeline_count: Integer,
          links: Openlayer::Models::InferencePipelineUpdateResponse::Project::Links,
          monitoring_goal_count: Integer,
          name: String,
          source: Openlayer::Models::InferencePipelineUpdateResponse::Project::source?,
          task_type: Openlayer::Models::InferencePipelineUpdateResponse::Project::task_type,
          version_count: Integer,
          workspace_id: String?,
          description: String?,
          git_repo: Openlayer::Models::InferencePipelineUpdateResponse::Project::GitRepo?
        }

      class Project < Openlayer::Internal::Type::BaseModel
        attr_accessor name: String

        attr_accessor task_type: Openlayer::Models::InferencePipelineUpdateResponse::Project::task_type

        attr_accessor description: String?

        attr_accessor id: String

        attr_accessor creator_id: String?

        attr_accessor date_created: Time

        attr_accessor date_updated: Time

        attr_accessor development_goal_count: Integer

        attr_accessor goal_count: Integer

        attr_accessor inference_pipeline_count: Integer

        attr_accessor links: Openlayer::Models::InferencePipelineUpdateResponse::Project::Links

        attr_accessor monitoring_goal_count: Integer

        attr_accessor source: Openlayer::Models::InferencePipelineUpdateResponse::Project::source?

        attr_accessor version_count: Integer

        attr_accessor workspace_id: String?

        attr_accessor git_repo: Openlayer::Models::InferencePipelineUpdateResponse::Project::GitRepo?

        def initialize: (
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          development_goal_count: Integer,
          goal_count: Integer,
          inference_pipeline_count: Integer,
          links: Openlayer::Models::InferencePipelineUpdateResponse::Project::Links,
          monitoring_goal_count: Integer,
          name: String,
          source: Openlayer::Models::InferencePipelineUpdateResponse::Project::source?,
          task_type: Openlayer::Models::InferencePipelineUpdateResponse::Project::task_type,
          version_count: Integer,
          workspace_id: String?,
          ?description: String?,
          ?git_repo: Openlayer::Models::InferencePipelineUpdateResponse::Project::GitRepo?
        ) -> void

        def to_hash: -> {
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          development_goal_count: Integer,
          goal_count: Integer,
          inference_pipeline_count: Integer,
          links: Openlayer::Models::InferencePipelineUpdateResponse::Project::Links,
          monitoring_goal_count: Integer,
          name: String,
          source: Openlayer::Models::InferencePipelineUpdateResponse::Project::source?,
          task_type: Openlayer::Models::InferencePipelineUpdateResponse::Project::task_type,
          version_count: Integer,
          workspace_id: String?,
          description: String?,
          git_repo: Openlayer::Models::InferencePipelineUpdateResponse::Project::GitRepo?
        }

        type links = { app: String }

        class Links < Openlayer::Internal::Type::BaseModel
          attr_accessor app: String

          def initialize: (app: String) -> void

          def to_hash: -> { app: String }
        end

        type source = :web | :api | :null

        module Source
          extend Openlayer::Internal::Type::Enum

          WEB: :web
          API: :api
          NULL: :null

          def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Project::source]
        end

        type task_type =
          :"llm-base"
          | :"tabular-classification"
          | :"tabular-regression"
          | :"text-classification"

        module TaskType
          extend Openlayer::Internal::Type::Enum

          LLM_BASE: :"llm-base"
          TABULAR_CLASSIFICATION: :"tabular-classification"
          TABULAR_REGRESSION: :"tabular-regression"
          TEXT_CLASSIFICATION: :"text-classification"

          def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Project::task_type]
        end

        type git_repo =
          {
            id: String,
            date_connected: Time,
            date_updated: Time,
            git_account_id: String,
            git_id: Integer,
            name: String,
            private: bool,
            project_id: String,
            slug: String,
            url: String,
            branch: String,
            root_dir: String
          }

        class GitRepo < Openlayer::Internal::Type::BaseModel
          attr_accessor git_account_id: String

          attr_accessor git_id: Integer

          attr_reader branch: String?

          def branch=: (String) -> String

          attr_reader root_dir: String?

          def root_dir=: (String) -> String

          attr_accessor id: String

          attr_accessor date_connected: Time

          attr_accessor date_updated: Time

          attr_accessor name: String

          attr_accessor private: bool

          attr_accessor project_id: String

          attr_accessor slug: String

          attr_accessor url: String

          def initialize: (
            id: String,
            date_connected: Time,
            date_updated: Time,
            git_account_id: String,
            git_id: Integer,
            name: String,
            private: bool,
            project_id: String,
            slug: String,
            url: String,
            ?branch: String,
            ?root_dir: String
          ) -> void

          def to_hash: -> {
            id: String,
            date_connected: Time,
            date_updated: Time,
            git_account_id: String,
            git_id: Integer,
            name: String,
            private: bool,
            project_id: String,
            slug: String,
            url: String,
            branch: String,
            root_dir: String
          }
        end
      end

      type workspace =
        {
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          invite_count: Integer,
          member_count: Integer,
          name: String,
          period_end_date: Time?,
          period_start_date: Time?,
          project_count: Integer,
          slug: String,
          status: Openlayer::Models::InferencePipelineUpdateResponse::Workspace::status,
          invite_code: String,
          monthly_usage: ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::MonthlyUsage],
          saml_only_access: bool,
          wildcard_domains: ::Array[String]
        }

      class Workspace < Openlayer::Internal::Type::BaseModel
        attr_accessor name: String

        attr_accessor slug: String

        attr_reader saml_only_access: bool?

        def saml_only_access=: (bool) -> bool

        attr_reader wildcard_domains: ::Array[String]?

        def wildcard_domains=: (::Array[String]) -> ::Array[String]

        attr_accessor id: String

        attr_accessor creator_id: String?

        attr_accessor date_created: Time

        attr_accessor date_updated: Time

        attr_accessor invite_count: Integer

        attr_accessor member_count: Integer

        attr_accessor period_end_date: Time?

        attr_accessor period_start_date: Time?

        attr_accessor project_count: Integer

        attr_accessor status: Openlayer::Models::InferencePipelineUpdateResponse::Workspace::status

        attr_reader monthly_usage: ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::MonthlyUsage]?

        def monthly_usage=: (
          ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::MonthlyUsage]
        ) -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::MonthlyUsage]

        def initialize: (
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          invite_count: Integer,
          member_count: Integer,
          name: String,
          period_end_date: Time?,
          period_start_date: Time?,
          project_count: Integer,
          slug: String,
          status: Openlayer::Models::InferencePipelineUpdateResponse::Workspace::status,
          ?monthly_usage: ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::MonthlyUsage],
          ?saml_only_access: bool,
          ?wildcard_domains: ::Array[String]
        ) -> void

        def to_hash: -> {
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          invite_count: Integer,
          member_count: Integer,
          name: String,
          period_end_date: Time?,
          period_start_date: Time?,
          project_count: Integer,
          slug: String,
          status: Openlayer::Models::InferencePipelineUpdateResponse::Workspace::status,
          invite_code: String,
          monthly_usage: ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::MonthlyUsage],
          saml_only_access: bool,
          wildcard_domains: ::Array[String]
        }

        type status =
          :active
          | :past_due
          | :unpaid
          | :canceled
          | :incomplete
          | :incomplete_expired
          | :trialing
          | :paused

        module Status
          extend Openlayer::Internal::Type::Enum

          ACTIVE: :active
          PAST_DUE: :past_due
          UNPAID: :unpaid
          CANCELED: :canceled
          INCOMPLETE: :incomplete
          INCOMPLETE_EXPIRED: :incomplete_expired
          TRIALING: :trialing
          PAUSED: :paused

          def self?.values: -> ::Array[Openlayer::Models::InferencePipelineUpdateResponse::Workspace::status]
        end

        type monthly_usage =
          {
            execution_time_ms: Integer?,
            month_year: Date,
            prediction_count: Integer
          }

        class MonthlyUsage < Openlayer::Internal::Type::BaseModel
          attr_accessor execution_time_ms: Integer?

          attr_reader month_year: Date?

          def month_year=: (Date) -> Date

          attr_reader prediction_count: Integer?

          def prediction_count=: (Integer) -> Integer

          def initialize: (
            ?execution_time_ms: Integer?,
            ?month_year: Date,
            ?prediction_count: Integer
          ) -> void

          def to_hash: -> {
            execution_time_ms: Integer?,
            month_year: Date,
            prediction_count: Integer
          }
        end
      end
    end
  end
end
