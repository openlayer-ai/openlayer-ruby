module Openlayer
  module Models
    type project_list_response =
      { items: ::Array[Openlayer::Models::ProjectListResponse::Item] }

    class ProjectListResponse < Openlayer::Internal::Type::BaseModel
      attr_accessor items: ::Array[Openlayer::Models::ProjectListResponse::Item]

      def initialize: (
        items: ::Array[Openlayer::Models::ProjectListResponse::Item]
      ) -> void

      def to_hash: -> {
        items: ::Array[Openlayer::Models::ProjectListResponse::Item]
      }

      type item =
        {
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          development_goal_count: Integer,
          goal_count: Integer,
          inference_pipeline_count: Integer,
          links: Openlayer::Models::ProjectListResponse::Item::Links,
          monitoring_goal_count: Integer,
          name: String,
          source: Openlayer::Models::ProjectListResponse::Item::source?,
          task_type: Openlayer::Models::ProjectListResponse::Item::task_type,
          version_count: Integer,
          workspace_id: String?,
          description: String?,
          git_repo: Openlayer::Models::ProjectListResponse::Item::GitRepo?
        }

      class Item < Openlayer::Internal::Type::BaseModel
        attr_accessor name: String

        attr_accessor task_type: Openlayer::Models::ProjectListResponse::Item::task_type

        attr_accessor description: String?

        attr_accessor id: String

        attr_accessor creator_id: String?

        attr_accessor date_created: Time

        attr_accessor date_updated: Time

        attr_accessor development_goal_count: Integer

        attr_accessor goal_count: Integer

        attr_accessor inference_pipeline_count: Integer

        attr_accessor links: Openlayer::Models::ProjectListResponse::Item::Links

        attr_accessor monitoring_goal_count: Integer

        attr_accessor source: Openlayer::Models::ProjectListResponse::Item::source?

        attr_accessor version_count: Integer

        attr_accessor workspace_id: String?

        attr_accessor git_repo: Openlayer::Models::ProjectListResponse::Item::GitRepo?

        def initialize: (
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          development_goal_count: Integer,
          goal_count: Integer,
          inference_pipeline_count: Integer,
          links: Openlayer::Models::ProjectListResponse::Item::Links,
          monitoring_goal_count: Integer,
          name: String,
          source: Openlayer::Models::ProjectListResponse::Item::source?,
          task_type: Openlayer::Models::ProjectListResponse::Item::task_type,
          version_count: Integer,
          workspace_id: String?,
          ?description: String?,
          ?git_repo: Openlayer::Models::ProjectListResponse::Item::GitRepo?
        ) -> void

        def to_hash: -> {
          id: String,
          creator_id: String?,
          date_created: Time,
          date_updated: Time,
          development_goal_count: Integer,
          goal_count: Integer,
          inference_pipeline_count: Integer,
          links: Openlayer::Models::ProjectListResponse::Item::Links,
          monitoring_goal_count: Integer,
          name: String,
          source: Openlayer::Models::ProjectListResponse::Item::source?,
          task_type: Openlayer::Models::ProjectListResponse::Item::task_type,
          version_count: Integer,
          workspace_id: String?,
          description: String?,
          git_repo: Openlayer::Models::ProjectListResponse::Item::GitRepo?
        }

        type links = { app: String }

        class Links < Openlayer::Internal::Type::BaseModel
          attr_accessor app: String

          def initialize: (app: String) -> void

          def to_hash: -> { app: String }
        end

        type source = :web | :api | :null

        module Source
          extend Openlayer::Internal::Type::Enum

          WEB: :web
          API: :api
          NULL: :null

          def self?.values: -> ::Array[Openlayer::Models::ProjectListResponse::Item::source]
        end

        type task_type =
          :"llm-base"
          | :"tabular-classification"
          | :"tabular-regression"
          | :"text-classification"

        module TaskType
          extend Openlayer::Internal::Type::Enum

          LLM_BASE: :"llm-base"
          TABULAR_CLASSIFICATION: :"tabular-classification"
          TABULAR_REGRESSION: :"tabular-regression"
          TEXT_CLASSIFICATION: :"text-classification"

          def self?.values: -> ::Array[Openlayer::Models::ProjectListResponse::Item::task_type]
        end

        type git_repo =
          {
            id: String,
            date_connected: Time,
            date_updated: Time,
            git_account_id: String,
            git_id: Integer,
            name: String,
            private: bool,
            project_id: String,
            slug: String,
            url: String,
            branch: String,
            root_dir: String
          }

        class GitRepo < Openlayer::Internal::Type::BaseModel
          attr_accessor git_account_id: String

          attr_accessor git_id: Integer

          attr_reader branch: String?

          def branch=: (String) -> String

          attr_reader root_dir: String?

          def root_dir=: (String) -> String

          attr_accessor id: String

          attr_accessor date_connected: Time

          attr_accessor date_updated: Time

          attr_accessor name: String

          attr_accessor private: bool

          attr_accessor project_id: String

          attr_accessor slug: String

          attr_accessor url: String

          def initialize: (
            id: String,
            date_connected: Time,
            date_updated: Time,
            git_account_id: String,
            git_id: Integer,
            name: String,
            private: bool,
            project_id: String,
            slug: String,
            url: String,
            ?branch: String,
            ?root_dir: String
          ) -> void

          def to_hash: -> {
            id: String,
            date_connected: Time,
            date_updated: Time,
            git_account_id: String,
            git_id: Integer,
            name: String,
            private: bool,
            project_id: String,
            slug: String,
            url: String,
            branch: String,
            root_dir: String
          }
        end
      end
    end
  end
end
