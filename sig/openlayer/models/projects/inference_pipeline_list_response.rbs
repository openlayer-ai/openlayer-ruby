module Openlayer
  module Models
    module Projects
      type inference_pipeline_list_response =
        {
          items: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item]
        }

      class InferencePipelineListResponse < Openlayer::Internal::Type::BaseModel
        attr_accessor items: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item]

        def initialize: (
          items: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item]
        ) -> void

        def to_hash: -> {
          items: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item]
        }

        type item =
          {
            id: String,
            date_created: Time,
            date_last_evaluated: Time?,
            date_last_sample_received: Time?,
            date_of_next_evaluation: Time?,
            date_updated: Time,
            description: String?,
            failing_goal_count: Integer,
            links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Links,
            name: String,
            passing_goal_count: Integer,
            project_id: String,
            status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::status,
            status_message: String?,
            total_goal_count: Integer,
            project: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project?,
            workspace: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace?,
            workspace_id: String
          }

        class Item < Openlayer::Internal::Type::BaseModel
          attr_accessor description: String?

          attr_accessor name: String

          attr_accessor project: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project?

          attr_accessor workspace: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace?

          attr_accessor id: String

          attr_accessor date_created: Time

          attr_accessor date_last_evaluated: Time?

          attr_accessor date_last_sample_received: Time?

          attr_accessor date_of_next_evaluation: Time?

          attr_accessor date_updated: Time

          attr_accessor failing_goal_count: Integer

          attr_accessor links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Links

          attr_accessor passing_goal_count: Integer

          attr_accessor project_id: String

          attr_accessor status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::status

          attr_accessor status_message: String?

          attr_accessor total_goal_count: Integer

          attr_reader workspace_id: String?

          def workspace_id=: (String) -> String

          def initialize: (
            id: String,
            date_created: Time,
            date_last_evaluated: Time?,
            date_last_sample_received: Time?,
            date_of_next_evaluation: Time?,
            date_updated: Time,
            description: String?,
            failing_goal_count: Integer,
            links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Links,
            name: String,
            passing_goal_count: Integer,
            project_id: String,
            status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::status,
            status_message: String?,
            total_goal_count: Integer,
            ?project: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project?,
            ?workspace: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace?,
            ?workspace_id: String
          ) -> void

          def to_hash: -> {
            id: String,
            date_created: Time,
            date_last_evaluated: Time?,
            date_last_sample_received: Time?,
            date_of_next_evaluation: Time?,
            date_updated: Time,
            description: String?,
            failing_goal_count: Integer,
            links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Links,
            name: String,
            passing_goal_count: Integer,
            project_id: String,
            status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::status,
            status_message: String?,
            total_goal_count: Integer,
            project: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project?,
            workspace: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace?,
            workspace_id: String
          }

          type links = { app: String }

          class Links < Openlayer::Internal::Type::BaseModel
            attr_accessor app: String

            def initialize: (app: String) -> void

            def to_hash: -> { app: String }
          end

          type status =
            :queued | :running | :paused | :failed | :completed | :unknown

          module Status
            extend Openlayer::Internal::Type::Enum

            QUEUED: :queued
            RUNNING: :running
            PAUSED: :paused
            FAILED: :failed
            COMPLETED: :completed
            UNKNOWN: :unknown

            def self?.values: -> ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::status]
          end

          type project =
            {
              id: String,
              creator_id: String?,
              date_created: Time,
              date_updated: Time,
              development_goal_count: Integer,
              goal_count: Integer,
              inference_pipeline_count: Integer,
              links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::Links,
              monitoring_goal_count: Integer,
              name: String,
              source: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::source?,
              task_type: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::task_type,
              version_count: Integer,
              workspace_id: String?,
              description: String?,
              git_repo: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::GitRepo?
            }

          class Project < Openlayer::Internal::Type::BaseModel
            attr_accessor name: String

            attr_accessor task_type: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::task_type

            attr_accessor description: String?

            attr_accessor id: String

            attr_accessor creator_id: String?

            attr_accessor date_created: Time

            attr_accessor date_updated: Time

            attr_accessor development_goal_count: Integer

            attr_accessor goal_count: Integer

            attr_accessor inference_pipeline_count: Integer

            attr_accessor links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::Links

            attr_accessor monitoring_goal_count: Integer

            attr_accessor source: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::source?

            attr_accessor version_count: Integer

            attr_accessor workspace_id: String?

            attr_accessor git_repo: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::GitRepo?

            def initialize: (
              id: String,
              creator_id: String?,
              date_created: Time,
              date_updated: Time,
              development_goal_count: Integer,
              goal_count: Integer,
              inference_pipeline_count: Integer,
              links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::Links,
              monitoring_goal_count: Integer,
              name: String,
              source: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::source?,
              task_type: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::task_type,
              version_count: Integer,
              workspace_id: String?,
              ?description: String?,
              ?git_repo: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::GitRepo?
            ) -> void

            def to_hash: -> {
              id: String,
              creator_id: String?,
              date_created: Time,
              date_updated: Time,
              development_goal_count: Integer,
              goal_count: Integer,
              inference_pipeline_count: Integer,
              links: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::Links,
              monitoring_goal_count: Integer,
              name: String,
              source: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::source?,
              task_type: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::task_type,
              version_count: Integer,
              workspace_id: String?,
              description: String?,
              git_repo: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::GitRepo?
            }

            type links = { app: String }

            class Links < Openlayer::Internal::Type::BaseModel
              attr_accessor app: String

              def initialize: (app: String) -> void

              def to_hash: -> { app: String }
            end

            type source = :web | :api | :null

            module Source
              extend Openlayer::Internal::Type::Enum

              WEB: :web
              API: :api
              NULL: :null

              def self?.values: -> ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::source]
            end

            type task_type =
              :"llm-base"
              | :"tabular-classification"
              | :"tabular-regression"
              | :"text-classification"

            module TaskType
              extend Openlayer::Internal::Type::Enum

              LLM_BASE: :"llm-base"
              TABULAR_CLASSIFICATION: :"tabular-classification"
              TABULAR_REGRESSION: :"tabular-regression"
              TEXT_CLASSIFICATION: :"text-classification"

              def self?.values: -> ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Project::task_type]
            end

            type git_repo =
              {
                id: String,
                date_connected: Time,
                date_updated: Time,
                git_account_id: String,
                git_id: Integer,
                name: String,
                private: bool,
                project_id: String,
                slug: String,
                url: String,
                branch: String,
                root_dir: String
              }

            class GitRepo < Openlayer::Internal::Type::BaseModel
              attr_accessor git_account_id: String

              attr_accessor git_id: Integer

              attr_reader branch: String?

              def branch=: (String) -> String

              attr_reader root_dir: String?

              def root_dir=: (String) -> String

              attr_accessor id: String

              attr_accessor date_connected: Time

              attr_accessor date_updated: Time

              attr_accessor name: String

              attr_accessor private: bool

              attr_accessor project_id: String

              attr_accessor slug: String

              attr_accessor url: String

              def initialize: (
                id: String,
                date_connected: Time,
                date_updated: Time,
                git_account_id: String,
                git_id: Integer,
                name: String,
                private: bool,
                project_id: String,
                slug: String,
                url: String,
                ?branch: String,
                ?root_dir: String
              ) -> void

              def to_hash: -> {
                id: String,
                date_connected: Time,
                date_updated: Time,
                git_account_id: String,
                git_id: Integer,
                name: String,
                private: bool,
                project_id: String,
                slug: String,
                url: String,
                branch: String,
                root_dir: String
              }
            end
          end

          type workspace =
            {
              id: String,
              creator_id: String?,
              date_created: Time,
              date_updated: Time,
              invite_count: Integer,
              member_count: Integer,
              name: String,
              period_end_date: Time?,
              period_start_date: Time?,
              project_count: Integer,
              slug: String,
              status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::status,
              invite_code: String,
              monthly_usage: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::MonthlyUsage],
              saml_only_access: bool,
              wildcard_domains: ::Array[String]
            }

          class Workspace < Openlayer::Internal::Type::BaseModel
            attr_accessor name: String

            attr_accessor slug: String

            attr_reader saml_only_access: bool?

            def saml_only_access=: (bool) -> bool

            attr_reader wildcard_domains: ::Array[String]?

            def wildcard_domains=: (::Array[String]) -> ::Array[String]

            attr_accessor id: String

            attr_accessor creator_id: String?

            attr_accessor date_created: Time

            attr_accessor date_updated: Time

            attr_accessor invite_count: Integer

            attr_accessor member_count: Integer

            attr_accessor period_end_date: Time?

            attr_accessor period_start_date: Time?

            attr_accessor project_count: Integer

            attr_accessor status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::status

            attr_reader monthly_usage: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::MonthlyUsage]?

            def monthly_usage=: (
              ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::MonthlyUsage]
            ) -> ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::MonthlyUsage]

            def initialize: (
              id: String,
              creator_id: String?,
              date_created: Time,
              date_updated: Time,
              invite_count: Integer,
              member_count: Integer,
              name: String,
              period_end_date: Time?,
              period_start_date: Time?,
              project_count: Integer,
              slug: String,
              status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::status,
              ?monthly_usage: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::MonthlyUsage],
              ?saml_only_access: bool,
              ?wildcard_domains: ::Array[String]
            ) -> void

            def to_hash: -> {
              id: String,
              creator_id: String?,
              date_created: Time,
              date_updated: Time,
              invite_count: Integer,
              member_count: Integer,
              name: String,
              period_end_date: Time?,
              period_start_date: Time?,
              project_count: Integer,
              slug: String,
              status: Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::status,
              invite_code: String,
              monthly_usage: ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::MonthlyUsage],
              saml_only_access: bool,
              wildcard_domains: ::Array[String]
            }

            type status =
              :active
              | :past_due
              | :unpaid
              | :canceled
              | :incomplete
              | :incomplete_expired
              | :trialing
              | :paused

            module Status
              extend Openlayer::Internal::Type::Enum

              ACTIVE: :active
              PAST_DUE: :past_due
              UNPAID: :unpaid
              CANCELED: :canceled
              INCOMPLETE: :incomplete
              INCOMPLETE_EXPIRED: :incomplete_expired
              TRIALING: :trialing
              PAUSED: :paused

              def self?.values: -> ::Array[Openlayer::Models::Projects::InferencePipelineListResponse::Item::Workspace::status]
            end

            type monthly_usage =
              {
                execution_time_ms: Integer?,
                month_year: Date,
                prediction_count: Integer
              }

            class MonthlyUsage < Openlayer::Internal::Type::BaseModel
              attr_accessor execution_time_ms: Integer?

              attr_reader month_year: Date?

              def month_year=: (Date) -> Date

              attr_reader prediction_count: Integer?

              def prediction_count=: (Integer) -> Integer

              def initialize: (
                ?execution_time_ms: Integer?,
                ?month_year: Date,
                ?prediction_count: Integer
              ) -> void

              def to_hash: -> {
                execution_time_ms: Integer?,
                month_year: Date,
                prediction_count: Integer
              }
            end
          end
        end
      end
    end
  end
end
